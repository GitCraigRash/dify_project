Set up Authenticaiton step
User neds to enter API credentials



Setps to complete to add AWS Quantum
Set up quantum in ordinary AWS
import boto3
form braket.circuits import Circuit
form braket.aws import AwsDevice
import matplotlib.pyplot as plt

aws_account_id = boto3.client("sts").get_caller_identity()["Account"]
device = AwsDevice("arn:aws:braket:::device/qpu/ionq/ionQdevice")
### To use a cloud simulator, all you have to do is input your ARN here but for local you do this:
device = LocalSimulator()

s3_founder = (f"amazon_braket_output-{aws_account_id}", Ion-Q")

bell = Circuit().h(0).cnot(0,1)

task = device.run(bell,s3_founder)

task = device.run(bell, s3_founder, shots=1)
counts = tasks.result().measurement_counts() 
print(counts
plt.bar(counts.keys(), counts.values()


I will need to add another class called \QuantumClient\ an extension 
of DifyClient for AWS Braket operations.
It will look like this but with specifics:
class QuantumClient(DifyClient):
    def __init__(self, api_key, aws_region, base_url="https://braket.amazonaws.com"):
        super().__init__(api_key, base_url)
        self.aws_region = aws_region

    def submit_quantum_job(self, circuit, s3_output_location):
        """
        Submits a quantum circuit to AWS Braket.
        
        :param circuit: Quantum circuit in JSON or Braket IR format.
        :param s3_output_location: S3 location for results.
        :return: Response from the API.
        """
        data = {
            "action": circuit,
            "deviceArn": "arn:aws:braket:::device/qpu/rigetti/Aspen-M-3",
            "outputS3Bucket": s3_output_location,
        }
        return self._send_request("POST", "/jobs", json=data)

    def get_job_status(self, job_id):
        """
        Fetches the status of a submitted quantum job.
        
        :param job_id: The unique ID of the job.
        :return: Response from the API.
        """
        return self._send_request("GET", f"/jobs/{job_id}")

    def get_job_results(self, job_id):
        """
        Retrieves the results of a completed quantum job.
        
        :param job_id: The unique ID of the job.
        :return: Response from the API.
        """
        return self._send_request("GET", f"/jobs/{job_id}/results")



But there is more! I iwll need to create unit tests and doucmentation

1. Provider-Level Integration
You need to define a new Provider entry for AWS Quantum Computing, specifying:

provider: A unique identifier for AWS Quantum (e.g., aws_quantum).
label: Human-readable names in multiple languages (en_US, zh_Hans).
description: A detailed description of the provider's capabilities.
icon_small/icon_large: Path to visual assets for the provider.
supported_model_types: The type of models supported by AWS Quantum, such as a custom quantum type.
configurate_methods: The configuration methods for the provider (e.g., customizable-model or fetch-from-remote).
provider_credential_schema: The credentials needed for accessing AWS Quantum services (e.g., API keys, endpoints).

2. Model-Level Integration
Define the AIModelEntity for any models or services AWS Quantum Computing provides:

model: Unique identifiers for models (e.g., braket-sv1 or braket-tn1).
label: Human-readable names for each model.
model_type: Define if these models fall under a pre-existing type or require a new quantum type.
parameter_rules: Rules for model parameters like token limits or API-specific configurations.
pricing: Optional pricing details for the models.

3. Credentials and Configuration
Set up ProviderCredentialSchema and ModelCredentialSchema to handle user inputs:

Define the variables needed for credentials (access_key, secret_key, etc.).
Specify UI components for these inputs (e.g., text-input, secret-input).
Configure validation rules, default values, and dependencies between form fields.



Step 1: Provider-Level Integration 
aws_quantum.json file
{
    "provider": "aws_quantum",
    "label": {
        "en_US": "AWS Quantum Computing",
        "zh_Hans": "AWS量子计算"
    },
    "description": {
        "en_US": "Access quantum computing resources on AWS via Braket.",
        "zh_Hans": "通过Braket访问AWS上的量子计算资源。"
    },
    "supported_model_types": ["quantum"],
    "configurate_methods": ["customizable-model"],
    "provider_credential_schema": {
        "credential_form_schemas": [
            {
                "variable": "access_key",
                "label": {
                    "en_US": "Access Key",
                    "zh_Hans": "访问密钥"
                },
                "type": "text-input",
                "required": true
            },
            {
                "variable": "secret_key",
                "label": {
                    "en_US": "Secret Key",
                    "zh_Hans": "秘密密钥"
                },
                "type": "secret-input",
                "required": true
            }
        ]
    }
}


Step 2: Define Supported Models
{
    "model": "braket-sv1",
    "label": {
        "en_US": "AWS Braket State Vector Simulator"
    },
    "model_type": "quantum",
    "parameter_rules": [
        {
            "name": "shots",
            "type": "int",
            "default": 1000,
            "min": 1,
            "max": 10000,
            "label": {
                "en_US": "Number of Shots"
            }
        }
    ]
}


Extend Backend Logic:
Implement a Python class (subclass of Extensible) to handle API interactions with AWS Braket. For example:

from core.extension.extensible import Extensible

class AWSQuantumProvider(Extensible):
    def __init__(self, tenant_id: str, config: dict):
        super().__init__(tenant_id, config)
        self.access_key = config['access_key']
        self.secret_key = config['secret_key']
        self.endpoint = "https://braket.amazonaws.com"
    
    def execute_task(self, task_config: dict):
        # Implement API calls to AWS Braket.
        pass
